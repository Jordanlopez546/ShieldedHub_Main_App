<FlatList
              data={renderData}
              keyExtractor={(item) => item.id.toString()}
              renderItem={({ item }) => (
                <Credential
                  staticData={staticData}
                  setStaticData={setStaticData}
                  item={item}
                  isDarkMode={isDarkMode}
                  setIsModalVisible={setIsModalVisible}
                />)}




<FlashList
              data={renderData}
              renderItem={({ item }) => (
                <Credential
                  staticData={staticData}
                  setStaticData={setStaticData}
                  item={item}
                  isDarkMode={isDarkMode}
                  setIsModalVisible={setIsModalVisible}
                />
              )}
              estimatedItemSize={200}
            />




// // Credential item component
  const renderCredentialItem: ListRenderItem<CredentialItemProps> = ({
    item,
  }) => {
    // Navigate to a credential item
    const navigateToCredentialItem = () => {
      if (setIsModalVisible) {
        setIsModalVisible(false);
      }

      navigation.navigate("CredentialItemScreen", {
        credentialId: item.credentialId,
        credentialTitle: item.credentialTitle,
        credentialEmail: item.credentialEmail,
        credentialPassword: item.credentialPassword,
        credentialNotes: item.credentialNotes,
      } as CredentialItemScreenParams);
    };

    const deleteAction = () => {
      deleteBtn(item.credentialId);
    };

    return (
      <TouchableOpacity
        key={item.credentialId}
        activeOpacity={0.4}
        onPress={() => navigateToCredentialItem()}
        style={[
          styles.credentialContainer,
          credentialContainerStyles,
          { backgroundColor: isDarkMode ? "#1E272E" : "#FFFFFF" },
        ]}
      >
        <View style={styles.firstIconContainer}>
          <AntDesign
            name="profile"
            size={25}
            color={isDarkMode ? "#fff" : "#000"}
          />
        </View>
        <View style={styles.textContainer}>
          <Text
            style={[styles.headerText, { color: isDarkMode ? "#fff" : "#000" }]}
          >
            {item.credentialTitle}
          </Text>
          <Text
            style={[styles.dateText, { color: isDarkMode ? "#fff" : "#000" }]}
          >
            {formatDate(item.createdAt)}
          </Text>
        </View>
        <View style={styles.secondIconContainer}>
          {!deletingNowStates[item.credentialId] ? (
            <TouchableOpacity onPress={deleteAction} activeOpacity={0.3}>
              <Feather
                name="trash-2"
                size={25}
                color={isDarkMode ? "#fff" : "#000"}
              />
            </TouchableOpacity>
          ) : (
            <ActivityIndicator color={"dodgerblue"} />
          )}
        </View>
      </TouchableOpacity>
    );
  };